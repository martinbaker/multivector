\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra kl.spad}
\author{Manuel Bronstein}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{category CACHSET CachableSet}
<<category CACHSET CachableSet>>=
)abbrev category CACHSET CachableSet
++ Sets whose elements can cache an integer
++ Author: Manuel Bronstein
++ Date Created: 31 Oct 1988
++ Date Last Updated: 14 May 1991
++ Description:
++   A cachable set is a set whose elements keep an integer as part
++   of their structure.
CachableSet: Category == SetCategory with
  position   : % -> NonNegativeInteger
    ++ position(x) returns the integer n associated to x.
  setPosition: (%, NonNegativeInteger) -> Void
    ++ setPosition(x, n) associates the integer n to x.

@
\section{package SCACHE SortedCache}
<<package SCACHE SortedCache>>=
)abbrev package SCACHE SortedCache
++ Cache of elements in a set
++ Author: Manuel Bronstein
++ Date Created: 31 Oct 1988
++ Date Last Updated: 14 May 1991
++   A sorted cache of a cachable set S is a dynamic structure that
++   keeps the elements of S sorted and assigns an integer to each
++   element of S once it is in the cache. This way, equality and ordering
++   on S are tested directly on the integers associated with the elements
++   of S, once they have been entered in the cache.
SortedCache(S:CachableSet): Exports == Implementation where
  N    ==> NonNegativeInteger
  DIFF ==> 1024

  Exports ==> with
    clearCache  : () -> Void
      ++ clearCache() empties the cache.
    enterInCache: (S, S -> Boolean) -> S
      ++ enterInCache(x, f) enters x in the cache, calling \spad{f(y)} to
      ++ determine whether x is equal to y. It returns x with an integer
      ++ associated with it.
    linearSearch: (S, S -> Boolean) -> Union(S, "failed")
      ++ linearSearch(x, f) searches x in the cache, calling \spad{f(y)}
      ++ to determine whether x is equal to y.  It returns y from cache
      ++ such that f(y) or failed is no such y exists.
    enterInCache: (S, (S, S) -> Integer) -> S
      ++ enterInCache(x, f) enters x in the cache, calling \spad{f(x, y)} to
      ++ determine whether \spad{x < y (f(x,y) < 0), x = y (f(x,y) = 0)}, or
      ++ \spad{x > y (f(x,y) > 0)}.
      ++ It returns x with an integer associated with it.

  Implementation ==> add
    shiftCache   : (N, N) -> Void
    insertInCache: (N, S, N) -> S
    expandCache: (S) -> Void
    insertBefore : (N, S) -> Void

    cache : PrimitiveArray S := empty()$(PrimitiveArray S)
    cache__size : N := 0;
    cache__use : N := 0;

    expandCache(x) ==
        if cache__size = cache__use then
            ocache := cache
            cache__size := 2*cache__size + 10
            cache := new(cache__size, x)$(PrimitiveArray S)
            for k in 0..(cache__use - 1) repeat
                cache(k) := ocache(k)
        void

    insertBefore(l, x) ==
        k : Integer
        expandCache(x)
        vscan := cache
        for k in 0..(cache__use - l - 1) repeat
            vscan(cache__use - k) := vscan(cache__use - k - 1)
        vscan(l) := x
        cache__use := cache__use + 1
        void

    shiftCache(l, n) ==
        k : Integer
        vscan := cache
        for k in l..(cache__use - 1) repeat
            x := vscan(k)
            setPosition(x, n + position x)
        void

    clearCache() ==
        k : Integer
        vscan := cache
        for k in 0..(cache__use - 1) repeat
            x := vscan(k)
            setPosition(x, 0)
        cache := empty()$(PrimitiveArray S)
        cache__size := 0
        cache__use := 0
        void

    insertAtEnd(x:S):Void ==
        expandCache(x)
        cache(cache__use) := x
        cache__use := cache__use + 1
        void

    linearSearch(x:S, equal?:S -> Boolean) ==
        k : Integer := 0
        -- Can not use for loop because equal? can insert new elements
        -- and change cache__use
        while k < cache__use repeat
            vscan := cache
            y := vscan(k)
            equal?(y) =>
                setPosition(x, position y)
                return y
            vscan := cache
            -- skip over elements possibly inserted by equal?
            while not(EQ(y, vscan(k))$Lisp) repeat k := k + 1
            k := k + 1
        return "failed"

    enterInCache(x:S, equal?:S -> Boolean) ==
        (res := linearSearch(x, equal?)) case S =>
            res::S
        setPosition(x, 1 + cache__use)
        insertAtEnd(x)
        x

    enterInCache(x:S, triage:(S, S) -> Integer) ==
        vscan := cache
        l : Integer := -1
        m : Integer := cache__use
        m0 := m
        zero?(cache__use) =>
            setPosition(x, DIFF)
            insertAtEnd(x)
            return x
        while (l + 1) < m repeat
            i := shift(l + m, -1)
            cp := triage(x, y := qelt(vscan, i))
            zero?(cp) =>
                setPosition(x, position y)
                return y
            if cp < 0 then
                m := i
            else
                l := i
        m = m0 =>
            setPosition(x, (position qelt(vscan, m - 1)) + DIFF)
            insertAtEnd(x)
            return x
        pos :N :=
                l < 0 => 0
                position qelt(vscan, l)
        insertInCache((l+1)::N, x, pos)

    insertInCache(before, x, pos) ==
        y := cache(before)
        if ((pos+1) = position y) then shiftCache(before, DIFF)
        setPosition(x, pos + (((position y) - pos)::N quo 2))
        insertBefore(before, x)
        x

@
\section{domain MKCHSET MakeCachableSet}
<<domain MKCHSET MakeCachableSet>>=
)abbrev domain MKCHSET MakeCachableSet
++ Make a cachable set from any set
++ Author: Manuel Bronstein
++ Date Created: ???
++ Date Last Updated: 14 May 1991
++ Description:
++   MakeCachableSet(S) returns a cachable set which is equal to S as a set.
MakeCachableSet(S:SetCategory): Exports == Implementation where
  Exports ==> Join(CachableSet, CoercibleTo S) with
    coerce: S -> %
      ++ coerce(s) returns s viewed as an element of %.

  Implementation ==> add
    import SortedCache(%)

    Rep := Record(setpart: S, pos: NonNegativeInteger)

    clearCache()

    position x             == x.pos
    setPosition(x, n)      == (x.pos := n; void)
    coerce(x:%):S          == x.setpart
    coerce(x:%):OutputForm == x::S::OutputForm
    coerce(s:S):%          == enterInCache([s, 0]$Rep,
                                 (x1 +-> (s = x1::S))@(% -> Boolean))

--    x < y ==
--      if position(x) = 0 then enterInCache(x, x1+->(x::S = x1::S))
--      if position(y) = 0 then enterInCache(y, x1+->(y::S = x1::S))
--      position(x) < position(y)

    x = y ==
      if position(x) = 0 then enterInCache(x,
                                 (x1 +-> (x::S = x1::S))@(% -> Boolean))
      if position(y) = 0 then enterInCache(y,
                                 (x1 +-> (y::S = x1::S))@(% -> Boolean))
      position(x) = position(y)

@
\section{Kernel}
I assume the word 'kernel' is not being used in its mathematical sense
such as: 'set of elements that map to the zero element' which is a bit
confusing since this is a mathematical program. I guess its being used
in used in its more general sense like: 'the inner part of a seed,
grain or nut'. In other words it being used, as when
discussing operating systems, to indicate the central part. Presumably
the namers of this domain are trying to tell us that it it central to
the whole operation of Axiom. If so, then I think its important that
it is well documented.

Kernel represents the most general type of expression in Axiom, more
specific types of expression are implemented using it (see Expression
domain).

Kernel is an inductively defined co-data-structure. The functions and
operations are not built into Kernel but are instead specified by the
user of this domain when an instance is created. An arbitrary number
of operations of any 'arity' can created by the user so it allows us
to construct expressions in a universal algebra. An
instance/representation of this domain is a 'term' in the expression
which can then be evaluated recursively.

Kernel can cache terms that is, if a term exists several times in an
expression, it will only be stored once. Does Kernel have to be defined
over CachableSet for this to happen? What are the performance implications
of this?
\section{Kernel Example}
As an example we can create Kernel over symbols.
\begin{verbatim}
(1) -> K := Kernel Symbol

   (1)  Kernel(Symbol)
                                                         Type: Type
\end{verbatim}
We can create a literal term in this Kernel.
\begin{verbatim}
(2) -> aliteral := kernel('a)$K

   (2)  a
                                               Type: Kernel(Symbol)
\end{verbatim}
Now we want to define an operator so we use BasicOperator domain, our
operator 'mult' has a symbol '*' and an arity of 2.
\begin{verbatim}
(3) -> mult := operator('*,2)

   (3)  *
                                                Type: BasicOperator
\end{verbatim}
We can then use this operator to create a term in Kernel at level
(height) of 1.
\begin{verbatim}
(4) -> term1 := kernel(mult,['a,'b],1)$K

   (4)  *(a,b)
                                               Type: Kernel(Symbol)
\end{verbatim}
This term can then be used in other terms, and so on, to create
an expression.
\section{domain KERNEL Kernel}
<<domain KERNEL Kernel>>=
)abbrev domain KERNEL Kernel
++ Operators applied to elements of a set
++ Author: Manuel Bronstein
++ Date Created: 22 March 1988
++ Date Last Updated: 10 August 1994
++ Description:
++ A kernel over a set S is an operator applied to a given list
++ of arguments from S.
Kernel(S : Comparable): Exports == Implementation where
  O  ==> OutputForm
  N  ==> NonNegativeInteger
  OP ==> BasicOperator

  Exports ==> Join(CachableSet, OrderedSet, Patternable S) with
    name    : % -> Symbol
      ++ name(op(a1,...,an)) returns the name of op.
    operator: % -> OP
      ++ operator(op(a1,...,an)) returns the operator op.
    argument: % -> List S
      ++ argument(op(a1,...,an)) returns \spad{[a1,...,an]}.
    height  : % -> N
      ++ height(k) returns the nesting level of k.
    kernel  : (OP, List S, N) -> %
      ++ kernel(op, [a1,...,an], m) returns the kernel \spad{op(a1,...,an)}
      ++ of nesting level m.
      ++ Error: if op is k-ary for some k not equal to m.
    kernel  : Symbol -> %
      ++ kernel(x) returns x viewed as a kernel.
    symbolIfCan: % -> Union(Symbol, "failed")
      ++ symbolIfCan(k) returns k viewed as a symbol if k is a symbol, and
      ++ "failed" otherwise.
    is?     : (%, OP) -> Boolean
      ++ is?(op(a1,...,an), f) tests if op = f.
    is?     : (%, Symbol) -> Boolean
      ++ is?(op(a1,...,an), s) tests if the name of op is s.
    if S has ConvertibleTo InputForm then ConvertibleTo InputForm

  Implementation ==> add
    import SortedCache(%)

    operator(k : %) : OP == SPAD_-KERNEL_-OP(k)$Lisp
    argument(k : %) : List S == SPAD_-KERNEL_-ARG(k)$Lisp
    height(k) == SPAD_-KERNEL_-NEST(k)$Lisp
    position(k : %) : N == SPAD_-KERNEL_-POSIT(k)$Lisp
    setPosition(k, n) == SET_-SPAD_-KERNEL_-POSIT(k, n)$Lisp
    mkKer(o : OP, a : List S, n : N) : % == makeSpadKernel(o, a, n)$Lisp

    SYMBOL  := '%symbol
    PMPRED  := '%pmpredicate
    PMOPT   := '%pmoptional
    PMMULT  := '%pmmultiple
    PMCONST := '%pmconstant
    SPECIALDISP  := '%specialDisp
    SPECIALEQUAL := '%specialEqual
    SPECIALINPUT := '%specialInput


    clearCache()

    B2Z   : Boolean -> Integer
    triage: (%, %)  -> Integer
    preds : OP      -> List Any

    is?(k:%, s:Symbol) == is?(operator k, s)
    is?(k:%, o:OP)     == (operator k) = o
    name k             == name operator k
    B2Z flag           == (flag => -1; 1)
    kernel s           == kernel(assert(operator(s,0),SYMBOL), nil(), 1)

    preds o ==
      (u := property(o, PMPRED)) case "failed" => nil()
      (u::None) pretend List(Any)

    symbolIfCan k ==
      has?(operator k, SYMBOL) => name operator k
      "failed"

    kerEqual(k1 : %, k2 : %, f : (%, %) -> Boolean) : Boolean ==
        height(k1)   ~= height(k2)   => false
        operator(k1) ~= operator(k2) => false
        (n1 := #(argument k1)) ~= (n2 := #(argument k2)) => false
        f(k1, k2)

    kernelEnterInCache(k : %) : % ==
        if (f0 := property(operator k, SPECIALEQUAL)) case None then
            f1 := (f0::None)  pretend ((%, %) -> Boolean)
            (res := linearSearch(k, y +-> kerEqual(k, y, f1))) case % =>
                return res::%
        enterInCache(k, triage)

    k1 = k2 ==
      if position(k1) = 0 then k1 := kernelEnterInCache(k1)
      if position(k2) = 0 then k2 := kernelEnterInCache(k2)
      position(k1) = position(k2)

    k1 < k2 ==
      if position(k1) = 0 then k1 := kernelEnterInCache(k1)
      if position(k2) = 0 then k2 := kernelEnterInCache(k2)
      position(k1) < position(k2)

    kernel(fn, x, n) ==
      ((u := arity fn) case N) and (#x ~= u::N)
                                    => error "Wrong number of arguments"
      kernelEnterInCache(mkKer(fn, x, n))

    -- SPECIALDISP contains a map List S -> OutputForm
    -- it is used when the converting the arguments first is not good,
    -- for instance with formal derivatives.
    coerce(k:%):OutputForm ==
      (v := symbolIfCan k) case Symbol => v::Symbol::OutputForm
      (f := property(o := operator k, SPECIALDISP)) case None =>
        ((f::None) pretend (List S -> OutputForm)) (argument k)
      l := [x::OutputForm for x in argument k]$List(OutputForm)
      (u := display o) case "failed" => prefix(name(o)::OutputForm, l)
      (u::(List OutputForm -> OutputForm)) l

    triage(k1, k2) ==
      height(k1)   ~= height(k2)   => B2Z(height(k1)   < height(k2))
      operator(k1) ~= operator(k2) => B2Z(operator(k1) < operator(k2))
      (n1 := #(argument k1)) ~= (n2 := #(argument k2)) => B2Z(n1 < n2)
      -- Handled by linear search earlier
      -- ((func := property(operator k1, SPECIALEQUAL)) case None) and
      --  (((func::None) pretend ((%, %) -> Boolean)) (k1, k2)) => 0
      for x1 in argument(k1) for x2 in argument(k2) repeat
        x1 ~= x2 => return B2Z(smaller?(x1, x2))
      0

    if S has ConvertibleTo InputForm then
      convert(k:%):InputForm ==
        (v := symbolIfCan k) case Symbol => convert(v::Symbol)@InputForm
        (f := property(o := operator k, SPECIALINPUT)) case None =>
          ((f::None) pretend (List S -> InputForm)) (argument k)
        l := [convert x for x in argument k]$List(InputForm)
        (u := input operator k) case "failed" =>
          convert concat(convert name operator k, l)
        (u::(List InputForm -> InputForm)) l

    if S has ConvertibleTo Pattern Integer then
      convert(k:%):Pattern(Integer) ==
        o := operator k
        (v := symbolIfCan k) case Symbol =>
          s  := patternVariable(v::Symbol,
                      has?(o, PMCONST), has?(o, PMOPT), has?(o, PMMULT))
          empty?(l := preds o) => s
          setPredicates(s, l)
        o [convert x for x in argument(k)]$List(Pattern Integer)

    if S has ConvertibleTo Pattern Float then
      convert(k:%):Pattern(Float) ==
        o := operator k
        (v := symbolIfCan k) case Symbol =>
          s  := patternVariable(v::Symbol,
                      has?(o, PMCONST), has?(o, PMOPT), has?(o, PMMULT))
          empty?(l := preds o) => s
          setPredicates(s, l)
        o [convert x for x in argument(k)]$List(Pattern Float)

@
\section{package KERNEL2 KernelFunctions2}
<<package KERNEL2 KernelFunctions2>>=
)abbrev package KERNEL2 KernelFunctions2
++ Description:
++ This package exports some auxiliary functions on kernels
KernelFunctions2(R:Comparable, S: Comparable): with
  constantKernel: R -> Kernel S
        ++ constantKernel(r) \undocumented
  constantIfCan : Kernel S -> Union(R, "failed")
        ++ constantIfCan(k) \undocumented

 == add
  import BasicOperatorFunctions1(R)

  constantKernel r == kernel(constantOperator r, nil(), 1)
  constantIfCan k  == constantOpIfCan operator k

@
\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@
<<*>>=
<<license>>

-- SPAD files for the functional world should be compiled in the
-- following order:
--
--   op  KL  expr function

<<category CACHSET CachableSet>>
<<package SCACHE SortedCache>>
<<domain MKCHSET MakeCachableSet>>
<<domain KERNEL Kernel>>
<<package KERNEL2 KernelFunctions2>>
@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}