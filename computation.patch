From 12baccbbdf1ab0fe3aee81722bbafcf83e752e90 Mon Sep 17 00:00:00 2001
From: martinbaker <ax87438@martinb.com>
Date: Thu, 15 Sep 2016 11:36:39 +0100
Subject: [PATCH 9/9] update urls in computation.spad

---
 src/algebra/computation.spad | 70 +++++++++++++++++++++-----------------------
 1 file changed, 33 insertions(+), 37 deletions(-)

diff --git a/src/algebra/computation.spad b/src/algebra/computation.spad
index fba9846..c87e7d8 100644
--- a/src/algebra/computation.spad
+++ b/src/algebra/computation.spad
@@ -84,7 +84,7 @@ Since we have bound and unbound variables so again non-associative
 and represented by binary tree structure.
 
 I am also working on a framework for function composition.
-\url{http : //www.euclideanspace.com/maths/standards/program/mycode/homset/}
+\url{http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/homset/}
 Function composition is associative and so can be
 represented by a list structure. It therefore has different
 mathematical properties to the structures studied here but they
@@ -120,18 +120,18 @@ monad in category theory terms, not the current FriCAS monad
 category).
 
 For more details see:
-\url{http : //www.euclideanspace.com/maths/standards/program/mycode/computation/}
+\url{http://www.euclideanspace.com/prog/scratchpad/mycode/computation/}
 \begin{itemize}
 \item Tutorial for lambda calculus:
-  \url{http : //www.euclideanspace.com/maths/standards/program/mycode/computation/lambda/}
+  \url{http://www.euclideanspace.com/prog/scratchpad/mycode/computation/lambda/}
 \item Tutorial for SKI calculus:
-  \url{http : //www.euclideanspace.com/maths/standards/program/mycode/computation/ski/}
+  \url{http://www.euclideanspace.com/prog/scratchpad/mycode/computation/ski/}
 \item Tutorial for Intuitionistic Logic
-  \url{http : //www.euclideanspace.com/maths/standards/program/mycode/computation/intuitionistic/}
+  \url{http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/logic/intuitionistic/}
 \item Tutorial for utilities to coerce between computation domains
-  \url{http : //www.euclideanspace.com/maths/standards/program/mycode/computation/utility/}
+  \url{http://www.euclideanspace.com/prog/scratchpad/mycode/computation/utility/}
 \item Tutorial for FriCAS source code generation
-  \url{http : //www.euclideanspace.com/maths/standards/program/mycode/computation/codeGen/}
+  \url{http://www.euclideanspace.com/prog/scratchpad/mycode/computation/codeGen/}
 \end{itemize}
 \end{abstract}
 \eject
@@ -152,7 +152,7 @@ of this software.
 \item Possible generalisations:
   \begin{itemize}
   \item I am working on a function composition (hom-set) domain
-     \url{http : //www.euclideanspace.com/maths/standards/program/mycode/homset/}
+     \url{http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/homset/}
      and it would be interesting to implement these
      as a special (non-associative) version of that.
   \item It would be interesting to see if these domains could be implemented
@@ -372,7 +372,7 @@ boolean logic for true/false values and extended for the unproven case.
 
 Note : Its hard to read this table in text, it displays better as
 html on this page:
-http : //www.euclideanspace.com/maths/standards/program/mycode/computation/intuitionistic/
+http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/logic/intuitionistic/
 
 (7) -> matrix[ [(k \/ j)::OutputForm for j in l] for k in l]
 
@@ -634,7 +634,7 @@ First a common category for the various variable types:
 ++ AMS Classifications:
 ++ Keywords:
 ++ References:
-++ http: //www.euclideanspace.com/maths/standards/program/mycode/computation/
+++ http://www.euclideanspace.com/prog/scratchpad/mycode/computation/
 ++ Description: VarCat represents a variable in Lambda and Ski domains.
 ++ Since we are working in terms of functions then a variable will be a
 ++ function (possibly a constant function)
@@ -684,7 +684,7 @@ untyped variables:
 ++ AMS Classifications:
 ++ Keywords:
 ++ References:
-++ http: //www.euclideanspace.com/maths/standards/program/mycode/computation/
+++ http://www.euclideanspace.com/prog/scratchpad/mycode/computation/
 ++ Description: Untyped represents an untyped variable in Lambda and Ski
 ++ domains, a variable has a name represented by a String.
 
@@ -788,7 +788,7 @@ typed variables:
 ++ AMS Classifications:
 ++ Keywords:
 ++ References:
-++ http: //www.euclideanspace.com/maths/standards/program/mycode/computation/
+++ http://www.euclideanspace.com/prog/scratchpad/mycode/computation/
 ++ Description: Typed represents an typed variable in Lambda and Ski
 ++ domains, a variable has a name represented by a String and a type
 ++ represented by intutionistic logic.
@@ -876,7 +876,7 @@ Typed() : Exports == Implementation where
 
 \section{lambda-Calculus}
 for more details see:
-\url{http : //www.euclideanspace.com/maths/standards/program/mycode/computation/lambda/}
+\url{http://www.euclideanspace.com/prog/scratchpad/mycode/computation/lambda/}
 
 \section{Notation}
 
@@ -1097,7 +1097,7 @@ about how to coerce to/from this algebra see below.
 ++ AMS Classifications:
 ++ Keywords:
 ++ References:
-++ http: //www.euclideanspace.com/maths/standards/program/mycode/computation/lambda/
+++ http://www.euclideanspace.com/prog/scratchpad/mycode/computation/lambda/
 ++ An implementation of untyped lambda-calculus
 
 Lambda(UT) : Exports == Implementation where
@@ -1597,7 +1597,7 @@ Lambda(UT) : Exports == Implementation where
 
 \section{SKI Combinators}
 for more details see:
-\url{http : //www.euclideanspace.com/maths/standards/program/mycode/computation/ski/}
+\url{http://www.euclideanspace.com/prog/scratchpad/mycode/computation/ski/}
 
 Ski combinators were introduced by Moses Schoenfinkel and Haskell
 Curry with the aim of eliminating the need for variables in
@@ -1832,7 +1832,7 @@ page, where there is explanation and tutorial.
 ++ AMS Classifications:
 ++ Keywords:
 ++ References:
-++ http: //www.euclideanspace.com/maths/standards/program/mycode/computation/ski/
+++ http://www.euclideanspace.com/prog/scratchpad/mycode/computation/ski/
 
 SKICombinators(UT) : Exports == Implementation where
 
@@ -2219,10 +2219,10 @@ SU to simplify notation:
 We can then create SKI combinators and convert them to lambda functions.
 
     For a tutorial about working with SKI combinators see:
-\url{http : //www.euclideanspace.com/maths/standards/program/mycode/computation/ski/}
+\url{http://www.euclideanspace.com/prog/scratchpad/mycode/computation/ski/}
 
     For a tutorial about working with lambda functions see:
-\url{http : //www.euclideanspace.com/maths/standards/program/mycode/computation/lambda/}
+\url{http://www.euclideanspace.com/prog/scratchpad/mycode/computation/lambda/}
 
 If the combinators don't have the required parameters then you
 will get a warning as follows. The code will attempt to add parameters
@@ -2393,9 +2393,9 @@ We can then create SKI combinators and convert them to intuitionistic
 logic.
 
     For a tutorial about working with SKI combinators see:
-http : //www.euclideanspace.com/maths/standards/program/mycode/computation/ski/
+http://www.euclideanspace.com/prog/scratchpad/mycode/computation/ski/
     For a tutorial about working with intuitionistic logic see:
-\url{http : //www.euclideanspace.com/maths/standards/program/mycode/computation/intuitionistic/}
+\url{http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/logic/intuitionistic/}
 
 
 This is known as the Curry-Howard isomorphism it uses the following rules:
@@ -2448,7 +2448,7 @@ util coerce apply rule SI3 in : S a b c
 ++ AMS Classifications:
 ++ Keywords:
 ++ References:
-++ http: //www.euclideanspace.com/maths/standards/program/mycode/computation/utility/
+++ http://www.euclideanspace.com/prog/scratchpad/mycode/computation/utility/
 ++ Description:
 ++ The compUtil package provides utilities to convert between the
 ++ computational domains: Lambda, Ski and ILogic.
@@ -2741,7 +2741,7 @@ compUtil(UT) : Exports == Implementation where
 
 \section{Code Generation Package}
 For more information about this package see:
-\url{http : //www.euclideanspace.com/maths/standards/program/mycode/computation/codeGen/}
+\url{http://www.euclideanspace.com/prog/scratchpad/mycode/computation/codeGen/}
 
 Maps abstract computational structures to real-world FriCAS code.
 
@@ -2942,7 +2942,7 @@ parameter is used as the deduction.
 ++ AMS Classifications:
 ++ Keywords:
 ++ References:
-++ http: //www.euclideanspace.com/maths/standards/program/mycode/computation/codeGen/
+++ http://www.euclideanspace.com/prog/scratchpad/mycode/computation/codeGen/
 ++ Description:
 ++ Maps abstract computational structures to real-world FriCAS code
 ++
@@ -2958,11 +2958,10 @@ parameter is used as the deduction.
 ++
 ++ As an example of this in Haskell
 ++ see "Djinn, a theorem prover in Haskell, for Haskell" here:
-++ http: //lambda-the-ultimate.org/node/1178
-++ http: //www.augustsson.net/Darcs/Djinn/
+++ http://lambda-the-ultimate.org/node/1178
 ++
 ++ see also: Philip Wadler - Theorems for free!
-++ http: //homepages.inf.ed.ac.uk/wadler/topics/parametricity.html
+++ http://homepages.inf.ed.ac.uk/wadler/topics/parametricity.html
 
 compCode() : Exports == Implementation where
 
@@ -3151,30 +3150,27 @@ compCode() : Exports == Implementation where
 \begin{thebibliography}{99}
 For more details see:
 [1] Philip Wadler 1989 - Theorems for free!
-http : //homepages.inf.ed.ac.uk/wadler/topics/parametricity.html
+http://homepages.inf.ed.ac.uk/wadler/topics/parametricity.html
 [2] "Djinn, a theorem prover in Haskell, for Haskell" here:
-http : //lambda-the-ultimate.org/node/1178
-http : //www.augustsson.net/Darcs/Djinn/
+http://lambda-the-ultimate.org/node/1178
 [3] Roy Dyckhoff 1992 - Contraction-free sequent calculi for intuitionistic logic
-http : //www.philfree.org/IMG/pdf/dyckhoff-ljt.pdf
-[4] http : //www.euclideanspace.com/maths/standards/program/mycode/computation/
+[4] http://www.euclideanspace.com/prog/scratchpad/mycode/computation/
 [5] Tutorial for lambda calculus:
-http : //www.euclideanspace.com/maths/standards/program/mycode/computation/lambda/
+http://www.euclideanspace.com/prog/scratchpad/mycode/computation/lambda/
 [6] Tutorial for SKI calculus:
-http : //www.euclideanspace.com/maths/standards/program/mycode/computation/ski/
+http://www.euclideanspace.com/prog/scratchpad/mycode/computation/ski/
 [7] Tutorial for Intuitionistic Logic
-http : //www.euclideanspace.com/maths/standards/program/mycode/computation/intuitionistic/
+http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/logic/intuitionistic/
 [8] Tutorial for utilities to coerce between computation domains
-http : //www.euclideanspace.com/maths/standards/program/mycode/computation/utility/
+http://www.euclideanspace.com/prog/scratchpad/mycode/computation/utility/
 [9] Tutorial for FriCAS source code generation
-http : //www.euclideanspace.com/maths/standards/program/mycode/computation/codeGen/
+http://www.euclideanspace.com/prog/scratchpad/mycode/computation/codeGen/
 [10] J. Lambek, P. J. Scott 1988
      Introduction to Higher-Order Categorical Logic ISBN : 0521356539
      This book shows the relationship between mathematical logic and category
      theory. Although this is not used in the current code, it suggests
      a promising generalisation.
 [11] Peter J. Denning, 2010
-http : //dl.acm.org/citation.cfm?id = 1880067&coll = portal&dl = ACM
 Discussion of "What is computing?"
 \end{thebibliography}
 \end{document}
-- 
2.1.4

