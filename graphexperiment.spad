)if false
\documentclass{article}
\usepackage{axiom}
\usepackage{url}
\newcommand{\File}[1]{\url{#1}}

\begin{document}
\title{graph theory related mathematical structures}
\author{Martin J Baker}
\maketitle
\begin{abstract}
I am trying to explore the most general way to model simplectical complexes and the structures involved
with homology and cohomology.

In order to try and keep things simple I start with graphs and cographs since they are a subset of
the structures we eventually want to model.
\end{abstract}
\eject
\tableofcontents
\eject
\section{Notation}
First define the representation of graph in as general way as possible. This representation contains
4 parts: a set of nodes, a set of edges (line segments) and two maps from edge to node, one for
source and one for target:

  Rep := Record(_
        nodes : Set Node, _
        edges : Set Edge,_
        source : Edge->Node, _
        target : Edge->Node_
        )

where Node and Edge are type parameters for domain.

This is not as general as I would have liked since it can only handle finite graphs. I would also
like to model infinite graphs, for example, a graph where the nodes are the natural numbers and
the edges map from 'n' to 'n+1'. We could represent it like this:

  Rep := Record(_
        source : Integer->Integer, _
        target : Integer->Integer_
        )

However I don't know how to combine these into one representation that could handle both finite
and infinite graphs in a completely general way without messy joins. For now we will just have
to accept limit of finite graphs only.

Another issue is, for (co)homology, we need to represent nodes and edges as subsets of both:
\begin{itemize}
\item A module over integers
\item A free Abelian group
\end{itemize}

See this thread:
\url{https://groups.google.com/forum/#!topic/fricas-devel/XHfVbJqz_AM}

  Rep := Record(_
        nodes : FreeAbelianGroup(Node),_
        edges : FreeAbelianGroup(Edge),_
        source : Edge->Node, _
        target : Edge->Node_
        )


(1) -> G := Graph(NNI,NNI)                             

   (1)  Graph(NonNegativeInteger,NonNegativeInteger)
                                                                   Type: Type
(2) -> graph([1,2,3,4],[1,2,3,4],[1,2,3,4],[2,3,4,1])$G

   (2)  [{1,2,3,4} 1->2 2->3 3->4 4->1]
                           Type: Graph(NonNegativeInteger,NonNegativeInteger)


)endif

)abbrev domain GRPH Graph
++ Author: Martin Baker
++ Date Created: Aug 2016
++ Basic Operations:
++ Related Constructors:
++ Keywords: graph theory
++ Description:
++  Category of directed graphs, allows us to model graph theory
++
++ References:
++ http://www.euclideanspace.com/prog/scratchpad/mycode/discrete/graph/

Graph(Node,Edge) : Exports == Implementation where

 Node : SetCategory
 Edge : SetCategory
 NNI==> NonNegativeInteger
 x<<y ==> hconcat(x::OutputForm,y::OutputForm)

 Exports ==> SetCategory with

  graph : (objs : Set Node,arr : Set Edge,s:Edge->Node,t:Edge->Node) -> %
    ++ graph(ob) is a constructor
  graph : (obj:List(Node),arr:List(Edge),s:List(Node),t:List(Node)) -> %
    ++ graph(ob) is a constructor

 Implementation ==> add

  Rep := Record(_
        nodes : Set Node, _
        edges : Set Edge,_
        source : Edge->Node, _
        target : Edge->Node_
        )

  -- constructor for graph
  graph(objs : Set Node,arr : Set Edge,s:Edge->Node,t:Edge->Node) : % ==
    [objs, arr,s,t]

  -- constructor for graph
  graph(obj:List(Node),arr:List(Edge),s:List(Node),t:List(Node)) : % ==
    MP := ListToMap(Edge,Node)
    objs:Set(Node) := set(obj)
    arrs:Set(Edge) := set(arr)
    sou:Edge->Node := match(arr,s)$MP
    tar:Edge->Node := match(arr,t)$MP
    [objs, arrs,sou,tar]

  -- output
  coerce(me : %) : OutputForm ==
    res : OutputForm := me.nodes::OutputForm
    es:List(Edge) := parts(me.edges)
    for e in es repeat
      fsource: Edge->Node := me.source
      ftarget: Edge->Node := me.target
      res := res << " "::Symbol << fsource(e) << "->"::Symbol << ftarget(e)
    bracket([res])

--Copyright (c) 2012-2016, Martin J Baker.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of Martin J Baker. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

)if false
\eject
\begin{thebibliography}{99}
For more details see:
[1] Floyd's algorithm
\url{http : //en.wikipedia.org/wiki/Floyd-Warshall_algorithm}
[2] Wiki page about 2-categories
\url{http : //en.wikipedia.org/wiki/2-category}

\end{thebibliography}
\end{document}
)endif